{"cells":[{"cell_type":"markdown","source":["# 1.Imports and device setup"],"metadata":{"id":"eYfIbd0YLy4B"}},{"cell_type":"code","execution_count":50,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":842,"status":"ok","timestamp":1732992043101,"user":{"displayName":"Srikanth","userId":"11288702543808839877"},"user_tz":-330},"id":"PBVs7Y5pZN_G","outputId":"f8b88cc6-9de4-4c83-91c6-bf949629167d"},"outputs":[{"output_type":"stream","name":"stdout","text":["Torch version: 2.5.1+cu121\n","Torchvision version: 0.20.1+cu121\n","Device: cuda:0\n"]}],"source":["# Import necessary libraries\n","%matplotlib inline\n","import matplotlib.pyplot as plt\n","import numpy as np\n","import pandas as pd\n","import xarray as xr\n","import zipfile\n","import os\n","from sklearn.model_selection import train_test_split\n","from sklearn.metrics import mean_squared_error, r2_score\n","from torch.utils.data import random_split, DataLoader\n","\n","import torch\n","import torchvision\n","from PIL import Image\n","import torchvision.transforms as transforms\n","import torch.nn as nn\n","import torch.nn.functional as F\n","import torch.optim as optim\n","\n","# Check PyTorch and torchvision versions\n","print(\"Torch version:\", torch.__version__)\n","print(\"Torchvision version:\", torchvision.__version__)\n","\n","# Set device to GPU if available\n","device = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")\n","print(\"Device:\", device)\n"]},{"cell_type":"markdown","source":["#### Unzip Datasets(in G.Drive): image_train, image_test"],"metadata":{"id":"6AIxENZfL2MC"}},{"cell_type":"code","execution_count":51,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6Rj0zyNAZaLq","executionInfo":{"status":"ok","timestamp":1732992092840,"user_tz":-330,"elapsed":49744,"user":{"displayName":"Srikanth","userId":"11288702543808839877"}},"outputId":"3b95358d-fabb-485d-da72-e118acf82055"},"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}],"source":["from google.colab import drive\n","# Mount Google Drive\n","drive.mount('/content/drive')\n","\n","# UNZIPPING THE DATASETS\n","with zipfile.ZipFile('/content/drive/MyDrive/finetuning/images_training_rev1.zip', 'r') as zip_ref:\n","    zip_ref.extractall('/content/image_train')\n","\n","# Path to the main zip file\n","zip_file_path = '/content/drive/MyDrive/finetuning/images_test_rev1.zip'\n","output_dir = '/content/image_test'\n","\n","# Create output directory if it doesn't exist\n","os.makedirs(output_dir, exist_ok=True)\n","\n","# Function to recursively unzip files\n","def unzip_all(zip_path, extract_to):\n","    with zipfile.ZipFile(zip_path, 'r') as zip_ref:\n","        zip_ref.extractall(extract_to)\n","        for root, _, files in os.walk(extract_to):\n","            for file in files:\n","                if file.endswith('.zip'):\n","                    nested_zip_path = os.path.join(root, file)\n","                    nested_output_dir = os.path.join(root, file.replace('.zip', ''))\n","                    os.makedirs(nested_output_dir, exist_ok=True)\n","                    unzip_all(nested_zip_path, nested_output_dir)  # Recursively unzip nested zip files\n","                    os.remove(nested_zip_path)  # Optionally remove nested zip file after extraction\n","\n","# Unzip the main file and handle nested zips\n","unzip_all(zip_file_path, output_dir)\n","\n"]},{"cell_type":"markdown","source":["#### Organize unzipped files"],"metadata":{"id":"QL8VjTBJL884"}},{"cell_type":"code","source":["# LOADING IMAGE PATH IMAGES AND LABELS\n","image_dir = '/content/image_train/images_training_rev1'  # Path to training images\n","labels_path = '/content/training_solutions_rev1.csv'  # Path to labels CSV\n","\n","# Load labels\n","labels_df = pd.read_csv(labels_path)\n","print(\"Labels loaded:\", labels_df.shape)"],"metadata":{"id":"9E6bzUSYLHKp","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1732992092841,"user_tz":-330,"elapsed":9,"user":{"displayName":"Srikanth","userId":"11288702543808839877"}},"outputId":"fc347d92-011d-49c8-bead-46b51e3d7a25"},"execution_count":52,"outputs":[{"output_type":"stream","name":"stdout","text":["Labels loaded: (61578, 38)\n"]}]},{"cell_type":"code","execution_count":53,"metadata":{"id":"Ud2AFlKMZyUU","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1732992092841,"user_tz":-330,"elapsed":8,"user":{"displayName":"Srikanth","userId":"11288702543808839877"}},"outputId":"b1ad2601-22b9-444f-932f-c13c6fa4edc2"},"outputs":[{"output_type":"stream","name":"stdout","text":["   GalaxyID  Class1.1  Class1.2  Class1.3  Class2.1  Class2.2  Class3.1  \\\n","0    100008  0.383147  0.616853  0.000000  0.000000  0.616853  0.038452   \n","1    100023  0.327001  0.663777  0.009222  0.031178  0.632599  0.467370   \n","2    100053  0.765717  0.177352  0.056931  0.000000  0.177352  0.000000   \n","3    100078  0.693377  0.238564  0.068059  0.000000  0.238564  0.109493   \n","4    100090  0.933839  0.000000  0.066161  0.000000  0.000000  0.000000   \n","\n","   Class3.2  Class4.1  Class4.2  ...  Class9.3  Class10.1  Class10.2  \\\n","0  0.578401  0.418398  0.198455  ...  0.000000   0.279952   0.138445   \n","1  0.165229  0.591328  0.041271  ...  0.018764   0.000000   0.131378   \n","2  0.177352  0.000000  0.177352  ...  0.000000   0.000000   0.000000   \n","3  0.129071  0.189098  0.049466  ...  0.000000   0.094549   0.000000   \n","4  0.000000  0.000000  0.000000  ...  0.000000   0.000000   0.000000   \n","\n","   Class10.3  Class11.1  Class11.2  Class11.3  Class11.4  Class11.5  Class11.6  \n","0   0.000000   0.000000   0.092886        0.0        0.0        0.0   0.325512  \n","1   0.459950   0.000000   0.591328        0.0        0.0        0.0   0.000000  \n","2   0.000000   0.000000   0.000000        0.0        0.0        0.0   0.000000  \n","3   0.094549   0.189098   0.000000        0.0        0.0        0.0   0.000000  \n","4   0.000000   0.000000   0.000000        0.0        0.0        0.0   0.000000  \n","\n","[5 rows x 38 columns]\n"]}],"source":["print(labels_df.head())"]},{"cell_type":"markdown","source":["# 2.PreProcessing Data"],"metadata":{"id":"RnV1oSCOL_2R"}},{"cell_type":"code","source":["transform = transforms.Compose([\n","    transforms.Resize((224, 224)),\n","    transforms.ToTensor(),\n","    transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),\n","])\n"],"metadata":{"id":"-uzBeW28keBO","executionInfo":{"status":"ok","timestamp":1732992092841,"user_tz":-330,"elapsed":7,"user":{"displayName":"Srikanth","userId":"11288702543808839877"}}},"execution_count":54,"outputs":[]},{"cell_type":"code","source":["\n","#CUSTOM DTASET CLASS(GALAXY DATASET)\n","class GalaxyDataset(torch.utils.data.Dataset):\n","    def __init__(self, image_dir, labels_df, transform=None):\n","        self.image_dir = image_dir\n","        self.labels_df = labels_df\n","        self.transform = transform\n","\n","    def __len__(self):\n","        return len(self.labels_df)\n","\n","    def __getitem__(self, idx):\n","        # Assuming the image filename is in the first column\n","        img_filename = str(self.labels_df.iloc[idx, 0]) + '.jpg'  # Add .jpg extension if needed\n","        img_name = os.path.join(self.image_dir, img_filename)  # Adjust if there's a different file extension\n","\n","        try:\n","            image = Image.open(img_name).convert('RGB')\n","        except FileNotFoundError:\n","            print(f\"Image file not found: {img_name}\")\n","            raise\n","\n","        label = torch.tensor(self.labels_df.iloc[idx, 1:].values, dtype=torch.float32)  # labels as tensor\n","        if self.transform:\n","            image = self.transform(image)\n","\n","        return image, label\n","\n"],"metadata":{"id":"HPCZnd3Lktzx","executionInfo":{"status":"ok","timestamp":1732992092841,"user_tz":-330,"elapsed":6,"user":{"displayName":"Srikanth","userId":"11288702543808839877"}}},"execution_count":55,"outputs":[]},{"cell_type":"markdown","source":["#### Splitting the Dataset"],"metadata":{"id":"NVYoeQTxME7K"}},{"cell_type":"code","source":["# Define the dataset\n","dataset = GalaxyDataset(image_dir, labels_df, transform=transform)\n","\n","# Splitting the dataset into train, validation, and test sets\n","batch_size = 37  # Batch size for data loading\n","# Load central_pixel_benchmark to get test GalaxyIDs\n","benchmark_ids = pd.read_csv(\"central_pixel_benchmark.csv\")[\"GalaxyID\"]\n","\n","# Filter the dataset for matching GalaxyIDs\n","test_indices = labels_df[labels_df[\"GalaxyID\"].isin(benchmark_ids)].index\n","train_val_indices = labels_df[~labels_df[\"GalaxyID\"].isin(benchmark_ids)].index\n","\n","# Re-split train and validation from the remaining data\n","train_size = int(0.7 * len(train_val_indices))\n","valid_size = int(0.15 * len(dataset))\n","test_size = int(len(dataset) )- train_size - valid_size\n","\n","\n","train_indices = train_val_indices[:train_size]\n","val_indices = train_val_indices[train_size:]\n","\n","# Subset datasets\n","train_dataset = torch.utils.data.Subset(dataset, train_indices)\n","valid_dataset = torch.utils.data.Subset(dataset, val_indices)\n","test_dataset = torch.utils.data.Subset(dataset, test_indices)\n","\n","# Create data loaders\n","trainloader = DataLoader(train_dataset, batch_size=batch_size, shuffle=True, drop_last=True)\n","validloader = DataLoader(valid_dataset, batch_size=batch_size, shuffle=False, drop_last=True)\n","testloader = DataLoader(test_dataset, batch_size=batch_size, shuffle=False)\n"],"metadata":{"id":"Wd44FoHOKi5r","executionInfo":{"status":"ok","timestamp":1732992093459,"user_tz":-330,"elapsed":624,"user":{"displayName":"Srikanth","userId":"11288702543808839877"}}},"execution_count":56,"outputs":[]},{"cell_type":"code","source":["# Check the shape of a batch from the train loader\n","dataiter = iter(trainloader)\n","images, labels = next(dataiter)  # Use next(dataiter) instead of dataiter.next()\n","print(\"Train batch shape:\", images.shape)\n","print(\"Train labels batch shape:\", labels.shape)\n","\n","# Check the shape of a batch from the validation loader\n","dataiter_valid = iter(validloader)\n","images_valid, labels_valid = next(dataiter_valid)\n","print(\"Validation batch shape:\", images_valid.shape)\n","print(\"Validation labels batch shape:\", labels_valid.shape)\n","\n"],"metadata":{"id":"J9xbebZwLPKK","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1732992188530,"user_tz":-330,"elapsed":1950,"user":{"displayName":"Srikanth","userId":"11288702543808839877"}},"outputId":"c4a9866f-62ed-4a56-e8ad-578d0e1f0592"},"execution_count":58,"outputs":[{"output_type":"stream","name":"stdout","text":["Train batch shape: torch.Size([37, 3, 224, 224])\n","Train labels batch shape: torch.Size([37, 37])\n","Validation batch shape: torch.Size([37, 3, 224, 224])\n","Validation labels batch shape: torch.Size([37, 37])\n"]}]},{"cell_type":"code","source":["# Check the shape of a batch from the test loader\n","dataiter_test = iter(testloader)\n","images_test, labels_test = next(dataiter_test)\n","print(\"Test batch shape:\", images_test.shape)\n","print(\"Test labels batch shape:\", labels_test.shape)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":371},"id":"2RdRZNjKYkCE","executionInfo":{"status":"error","timestamp":1732992193609,"user_tz":-330,"elapsed":622,"user":{"displayName":"Srikanth","userId":"11288702543808839877"}},"outputId":"7a898f85-e5fd-4b55-facb-75ca77fa25be"},"execution_count":59,"outputs":[{"output_type":"error","ename":"StopIteration","evalue":"","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mStopIteration\u001b[0m                             Traceback (most recent call last)","\u001b[0;32m<ipython-input-59-7d72ee5a0d7e>\u001b[0m in \u001b[0;36m<cell line: 3>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# Check the shape of a batch from the test loader\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0mdataiter_test\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0miter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtestloader\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0mimages_test\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabels_test\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnext\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdataiter_test\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Test batch shape:\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mimages_test\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Test labels batch shape:\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabels_test\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/torch/utils/data/dataloader.py\u001b[0m in \u001b[0;36m__next__\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    699\u001b[0m                 \u001b[0;31m# TODO(https://github.com/pytorch/pytorch/issues/76750)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    700\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_reset\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# type: ignore[call-arg]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 701\u001b[0;31m             \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_next_data\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    702\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_num_yielded\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    703\u001b[0m             if (\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/torch/utils/data/dataloader.py\u001b[0m in \u001b[0;36m_next_data\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    754\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    755\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_next_data\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 756\u001b[0;31m         \u001b[0mindex\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_next_index\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# may raise StopIteration\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    757\u001b[0m         \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_dataset_fetcher\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfetch\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindex\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# may raise StopIteration\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    758\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_pin_memory\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/torch/utils/data/dataloader.py\u001b[0m in \u001b[0;36m_next_index\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    689\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    690\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_next_index\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 691\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mnext\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_sampler_iter\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# may raise StopIteration\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    692\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    693\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_next_data\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mStopIteration\u001b[0m: "]}]},{"cell_type":"code","source":["print(labels_df.head())  # Check if GalaxyIDs align with the benchmark file\n","print(benchmark_ids.head())  # Ensure GalaxyIDs are correctly loaded\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"j3CKDsWaVPZf","executionInfo":{"status":"ok","timestamp":1732991322642,"user_tz":-330,"elapsed":592,"user":{"displayName":"Srikanth","userId":"11288702543808839877"}},"outputId":"e6c9d30b-527a-46fa-bb23-fd85f88eea3b"},"execution_count":43,"outputs":[{"output_type":"stream","name":"stdout","text":["   GalaxyID  Class1.1  Class1.2  Class1.3  Class2.1  Class2.2  Class3.1  \\\n","0    100008  0.383147  0.616853  0.000000  0.000000  0.616853  0.038452   \n","1    100023  0.327001  0.663777  0.009222  0.031178  0.632599  0.467370   \n","2    100053  0.765717  0.177352  0.056931  0.000000  0.177352  0.000000   \n","3    100078  0.693377  0.238564  0.068059  0.000000  0.238564  0.109493   \n","4    100090  0.933839  0.000000  0.066161  0.000000  0.000000  0.000000   \n","\n","   Class3.2  Class4.1  Class4.2  ...  Class9.3  Class10.1  Class10.2  \\\n","0  0.578401  0.418398  0.198455  ...  0.000000   0.279952   0.138445   \n","1  0.165229  0.591328  0.041271  ...  0.018764   0.000000   0.131378   \n","2  0.177352  0.000000  0.177352  ...  0.000000   0.000000   0.000000   \n","3  0.129071  0.189098  0.049466  ...  0.000000   0.094549   0.000000   \n","4  0.000000  0.000000  0.000000  ...  0.000000   0.000000   0.000000   \n","\n","   Class10.3  Class11.1  Class11.2  Class11.3  Class11.4  Class11.5  Class11.6  \n","0   0.000000   0.000000   0.092886        0.0        0.0        0.0   0.325512  \n","1   0.459950   0.000000   0.591328        0.0        0.0        0.0   0.000000  \n","2   0.000000   0.000000   0.000000        0.0        0.0        0.0   0.000000  \n","3   0.094549   0.189098   0.000000        0.0        0.0        0.0   0.000000  \n","4   0.000000   0.000000   0.000000        0.0        0.0        0.0   0.000000  \n","\n","[5 rows x 38 columns]\n","0    100018\n","1    100037\n","2    100042\n","3    100052\n","4    100056\n","Name: GalaxyID, dtype: int64\n"]}]},{"cell_type":"code","source":["print(labels_df.head())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"S5h-A2PSVbtk","executionInfo":{"status":"ok","timestamp":1732991371536,"user_tz":-330,"elapsed":927,"user":{"displayName":"Srikanth","userId":"11288702543808839877"}},"outputId":"2add0a88-a297-48c3-d27c-304a92039b7a"},"execution_count":45,"outputs":[{"output_type":"stream","name":"stdout","text":["   GalaxyID  Class1.1  Class1.2  Class1.3  Class2.1  Class2.2  Class3.1  \\\n","0    100008  0.383147  0.616853  0.000000  0.000000  0.616853  0.038452   \n","1    100023  0.327001  0.663777  0.009222  0.031178  0.632599  0.467370   \n","2    100053  0.765717  0.177352  0.056931  0.000000  0.177352  0.000000   \n","3    100078  0.693377  0.238564  0.068059  0.000000  0.238564  0.109493   \n","4    100090  0.933839  0.000000  0.066161  0.000000  0.000000  0.000000   \n","\n","   Class3.2  Class4.1  Class4.2  ...  Class9.3  Class10.1  Class10.2  \\\n","0  0.578401  0.418398  0.198455  ...  0.000000   0.279952   0.138445   \n","1  0.165229  0.591328  0.041271  ...  0.018764   0.000000   0.131378   \n","2  0.177352  0.000000  0.177352  ...  0.000000   0.000000   0.000000   \n","3  0.129071  0.189098  0.049466  ...  0.000000   0.094549   0.000000   \n","4  0.000000  0.000000  0.000000  ...  0.000000   0.000000   0.000000   \n","\n","   Class10.3  Class11.1  Class11.2  Class11.3  Class11.4  Class11.5  Class11.6  \n","0   0.000000   0.000000   0.092886        0.0        0.0        0.0   0.325512  \n","1   0.459950   0.000000   0.591328        0.0        0.0        0.0   0.000000  \n","2   0.000000   0.000000   0.000000        0.0        0.0        0.0   0.000000  \n","3   0.094549   0.189098   0.000000        0.0        0.0        0.0   0.000000  \n","4   0.000000   0.000000   0.000000        0.0        0.0        0.0   0.000000  \n","\n","[5 rows x 38 columns]\n"]}]},{"cell_type":"code","source":["print(benchmark_ids.head())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"fAV5uMhsVW21","executionInfo":{"status":"ok","timestamp":1732991351571,"user_tz":-330,"elapsed":757,"user":{"displayName":"Srikanth","userId":"11288702543808839877"}},"outputId":"a41c1951-20d0-4765-f3a2-ebdd75f5c53e"},"execution_count":44,"outputs":[{"output_type":"stream","name":"stdout","text":["0    100018\n","1    100037\n","2    100042\n","3    100052\n","4    100056\n","Name: GalaxyID, dtype: int64\n"]}]},{"cell_type":"markdown","source":["#### Visualize training dataset"],"metadata":{"id":"gVp5UawjMwiM"}},{"cell_type":"code","source":["# Visualizing a batch of training images\n","dataiter = iter(trainloader)\n","images, labels = next(dataiter)  # Fetch the first batch of training images\n","print(\"Train batch shape:\", images.shape)\n","print(\"Train labels batch shape:\", labels.shape)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"uBk5gGzbK4bL","executionInfo":{"status":"ok","timestamp":1732989389632,"user_tz":-330,"elapsed":6,"user":{"displayName":"Srikanth","userId":"11288702543808839877"}},"outputId":"16c980eb-d0a3-4ad3-dc76-9b3594c3dec9"},"execution_count":30,"outputs":[{"output_type":"stream","name":"stdout","text":["Train batch shape: torch.Size([37, 3, 224, 224])\n","Train labels batch shape: torch.Size([37, 37])\n"]}]},{"cell_type":"code","source":["# Example of visualizing images from the train dataset\n","import matplotlib.pyplot as plt\n","\n","fig, ax = plt.subplots(1, 4, figsize=(15, 5))\n","for i in range(4):  # Display 4 images\n","    ax[i].imshow(images[i].permute(1, 2, 0).cpu().numpy() * 0.5 + 0.5)  # Unnormalize for visualization\n","    ax[i].axis('off')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":278},"id":"-PKKNTS3K6s6","executionInfo":{"status":"ok","timestamp":1732989390486,"user_tz":-330,"elapsed":858,"user":{"displayName":"Srikanth","userId":"11288702543808839877"}},"outputId":"7f2ce6cb-b80c-46b0-94e8-65daf0626ff5"},"execution_count":31,"outputs":[{"output_type":"stream","name":"stderr","text":["WARNING:matplotlib.image:Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).\n","WARNING:matplotlib.image:Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).\n","WARNING:matplotlib.image:Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).\n","WARNING:matplotlib.image:Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1500x500 with 4 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["# 3.Load Pre-Trained ResNet-50"],"metadata":{"id":"KUf9oKkzMHZF"}},{"cell_type":"code","source":["from torchvision.models import resnet50, ResNet50_Weights\n","\n","# Load pre-trained ResNet-50 model\n","model = resnet50(weights=ResNet50_Weights.IMAGENET1K_V2)\n","\n","# Modify the final layer to match the number of output classes\n","num_classes = labels_df.shape[1] - 1  # Exclude the image filename column\n","model.fc = nn.Linear(model.fc.in_features, num_classes)\n","\n","# Move model to the device\n","model = model.to(device)\n","print(\"Model loaded and moved to device.\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"NMh_Jh5nPV9d","executionInfo":{"status":"ok","timestamp":1732989391621,"user_tz":-330,"elapsed":1145,"user":{"displayName":"Srikanth","userId":"11288702543808839877"}},"outputId":"efc7b930-0dbb-4b9c-a25f-b9173db6e47f"},"execution_count":32,"outputs":[{"output_type":"stream","name":"stdout","text":["Model loaded and moved to device.\n"]}]},{"cell_type":"code","source":["from sklearn.metrics import accuracy_score\n","from tqdm import tqdm\n","\n","## Placeholder for predictions\n","\n","galaxy_ids = []  # To store Galaxy IDs\n","\n","all_preds = []   # To store predictions (probabilities for each class)\n","\n","\n","\n","# Evaluate on the test set\n","\n","with torch.no_grad():\n","\n","    for batch_idx, (inputs, _) in tqdm(enumerate(testloader), total=len(testloader)):\n","\n","        inputs = inputs.to(device)\n","\n","\n","\n","        # Forward pass\n","\n","        outputs = model(inputs)\n","\n","        probs = torch.softmax(outputs, dim=1)  # Apply softmax for probabilities\n","\n","\n","\n","        # Map the indices back to the original dataset\n","\n","        subset_indices = test_dataset.indices\n","\n","        original_indices = subset_indices[batch_idx * batch_size: (batch_idx + 1) * batch_size]\n","\n","        filenames = [dataset.labels_df.iloc[idx, 0] for idx in original_indices]\n","\n","\n","\n","        # Store galaxy IDs (from filenames) and predictions\n","\n","        galaxy_ids.extend(filenames)\n","\n","        all_preds.extend(probs.cpu().numpy())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"rsyeOQg7LGC7","executionInfo":{"status":"ok","timestamp":1732989453628,"user_tz":-330,"elapsed":576,"user":{"displayName":"Srikanth","userId":"11288702543808839877"}},"outputId":"62942769-f347-411d-d013-9f38aa322d42"},"execution_count":39,"outputs":[{"output_type":"stream","name":"stderr","text":["0it [00:00, ?it/s]\n"]}]},{"cell_type":"code","source":["print(f\"Test dataset size: {len(test_dataset)}\")\n","print(f\"Test loader batches: {len(testloader)}\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zsL48OeTOYjC","executionInfo":{"status":"ok","timestamp":1732989523086,"user_tz":-330,"elapsed":591,"user":{"displayName":"Srikanth","userId":"11288702543808839877"}},"outputId":"9486394c-2155-41fa-a2b2-525e2984e63f"},"execution_count":40,"outputs":[{"output_type":"stream","name":"stdout","text":["Test dataset size: 0\n","Test loader batches: 0\n"]}]},{"cell_type":"code","source":["pip install tqdm"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_W8jq2nOYAeu","executionInfo":{"status":"ok","timestamp":1732989394988,"user_tz":-330,"elapsed":3372,"user":{"displayName":"Srikanth","userId":"11288702543808839877"}},"outputId":"10673d48-0cfd-44ff-8dbe-8d2ad42a3292"},"execution_count":34,"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: tqdm in /usr/local/lib/python3.10/dist-packages (4.66.6)\n"]}]},{"cell_type":"code","source":["# Checking the shape of all_preds\n","print(np.array(all_preds).shape)  # Should show (number of samples, 37)\n","\n","# If you're using a PyTorch tensor\n","print(torch.tensor(all_preds).shape)  # Should show (number of samples, 37)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"J5uBPYA4Xfg0","executionInfo":{"status":"ok","timestamp":1732989394988,"user_tz":-330,"elapsed":21,"user":{"displayName":"Srikanth","userId":"11288702543808839877"}},"outputId":"13f826f6-30a1-4de2-f61d-55ff87ac2e64"},"execution_count":35,"outputs":[{"output_type":"stream","name":"stdout","text":["(0,)\n","torch.Size([0])\n"]}]},{"cell_type":"code","source":["print(labels_df.columns)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"HbtINmmUbPML","executionInfo":{"status":"ok","timestamp":1732989394988,"user_tz":-330,"elapsed":21,"user":{"displayName":"Srikanth","userId":"11288702543808839877"}},"outputId":"0ba0005d-1976-4cf7-c5cd-c260fdc0c734"},"execution_count":36,"outputs":[{"output_type":"stream","name":"stdout","text":["Index(['GalaxyID', 'Class1.1', 'Class1.2', 'Class1.3', 'Class2.1', 'Class2.2',\n","       'Class3.1', 'Class3.2', 'Class4.1', 'Class4.2', 'Class5.1', 'Class5.2',\n","       'Class5.3', 'Class5.4', 'Class6.1', 'Class6.2', 'Class7.1', 'Class7.2',\n","       'Class7.3', 'Class8.1', 'Class8.2', 'Class8.3', 'Class8.4', 'Class8.5',\n","       'Class8.6', 'Class8.7', 'Class9.1', 'Class9.2', 'Class9.3', 'Class10.1',\n","       'Class10.2', 'Class10.3', 'Class11.1', 'Class11.2', 'Class11.3',\n","       'Class11.4', 'Class11.5', 'Class11.6'],\n","      dtype='object')\n"]}]},{"cell_type":"code","source":["print(all_preds.shape)\n","print(all_preds)\n"],"metadata":{"id":"UTWCrv1CtKSF","executionInfo":{"status":"error","timestamp":1732997606815,"user_tz":-330,"elapsed":930,"user":{"displayName":"Srikanth","userId":"11288702543808839877"}},"outputId":"05132454-8cc7-4685-eba6-2cb985295656","colab":{"base_uri":"https://localhost:8080/","height":165}},"execution_count":1,"outputs":[{"output_type":"error","ename":"NameError","evalue":"name 'all_preds' is not defined","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-1-a2611952f63b>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mall_preds\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mall_preds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'all_preds' is not defined"]}]},{"cell_type":"code","source":["# Ensure labels are numerical\n","labels_df.iloc[:, 1:] = labels_df.iloc[:, 1:].astype(float)\n","\n","# Extract true labels for test dataset\n","all_labels = labels_df.iloc[test_dataset.indices, 1:].values\n","\n","# Convert all_preds to a NumPy array\n","all_preds = np.array(all_preds)\n","\n","# Ensure shape consistency\n","if all_preds.shape != all_labels.shape:\n","    print(f\"Shape mismatch: all_preds={all_preds.shape}, all_labels={all_labels.shape}\")\n","else:\n","    # Calculate RMSE\n","    rmse = np.sqrt(np.mean((all_preds - all_labels) ** 2))\n","    print(\"RMSE on test set:\", rmse)\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Mgy73pYLVx46","executionInfo":{"status":"ok","timestamp":1732989394988,"user_tz":-330,"elapsed":20,"user":{"displayName":"Srikanth","userId":"11288702543808839877"}},"outputId":"18e7fe0e-2f1a-42b4-cd47-cfdd34096e4e"},"execution_count":37,"outputs":[{"output_type":"stream","name":"stdout","text":["Shape mismatch: all_preds=(0,), all_labels=(0, 37)\n"]}]},{"cell_type":"code","source":["# Save predictions for submission\n","submission = pd.DataFrame(all_preds, columns=[\n","    'Class1.1', 'Class1.2', 'Class1.3',  # Question 1\n","    'Class2.1', 'Class2.2',              # Question 2\n","    'Class3.1', 'Class3.2',              # Question 3\n","    'Class4.1', 'Class4.2',              # Question 4\n","    'Class5.1', 'Class5.2', 'Class5.3', 'Class5.4',  # Question 5\n","    'Class6.1', 'Class6.2',              # Question 6\n","    'Class7.1', 'Class7.2', 'Class7.3',  # Question 7\n","    'Class8.1', 'Class8.2', 'Class8.3', 'Class8.4', 'Class8.5', 'Class8.6', 'Class8.7',  # Question 8\n","    'Class9.1', 'Class9.2', 'Class9.3',  # Question 9\n","    'Class10.1', 'Class10.2', 'Class10.3',  # Question 10\n","    'Class11.1', 'Class11.2', 'Class11.3', 'Class11.4', 'Class11.5', 'Class11.6'  # Question 11  # Continue with all 37 classes\n","    # Add column names here corresponding to your GalaxyZoo classes\n","])\n","submission.insert(0, \"GalaxyID\", pd.read_csv(labels_path)[\"GalaxyID\"])\n","submission.to_csv(\"submission.csv\", index=False)\n","print(\"Submission file saved as submission.csv\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":407},"id":"pYJEDYvDwkuC","executionInfo":{"status":"error","timestamp":1732989394988,"user_tz":-330,"elapsed":19,"user":{"displayName":"Srikanth","userId":"11288702543808839877"}},"outputId":"6316d059-8cb7-4c82-847f-e356cd8c23ca"},"execution_count":38,"outputs":[{"output_type":"error","ename":"ValueError","evalue":"Shape of passed values is (0, 1), indices imply (0, 37)","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-38-aa1f7f335048>\u001b[0m in \u001b[0;36m<cell line: 2>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# Save predictions for submission\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m submission = pd.DataFrame(all_preds, columns=[\n\u001b[0m\u001b[1;32m      3\u001b[0m     \u001b[0;34m'Class1.1'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'Class1.2'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'Class1.3'\u001b[0m\u001b[0;34m,\u001b[0m  \u001b[0;31m# Question 1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m     \u001b[0;34m'Class2.1'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'Class2.2'\u001b[0m\u001b[0;34m,\u001b[0m              \u001b[0;31m# Question 2\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m     \u001b[0;34m'Class3.1'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'Class3.2'\u001b[0m\u001b[0;34m,\u001b[0m              \u001b[0;31m# Question 3\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, data, index, columns, dtype, copy)\u001b[0m\n\u001b[1;32m    825\u001b[0m                 )\n\u001b[1;32m    826\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 827\u001b[0;31m                 mgr = ndarray_to_mgr(\n\u001b[0m\u001b[1;32m    828\u001b[0m                     \u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    829\u001b[0m                     \u001b[0mindex\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/internals/construction.py\u001b[0m in \u001b[0;36mndarray_to_mgr\u001b[0;34m(values, index, columns, dtype, copy, typ)\u001b[0m\n\u001b[1;32m    334\u001b[0m     )\n\u001b[1;32m    335\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 336\u001b[0;31m     \u001b[0m_check_values_indices_shape_match\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindex\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcolumns\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    337\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    338\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mtyp\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m\"array\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/internals/construction.py\u001b[0m in \u001b[0;36m_check_values_indices_shape_match\u001b[0;34m(values, index, columns)\u001b[0m\n\u001b[1;32m    418\u001b[0m         \u001b[0mpassed\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mvalues\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    419\u001b[0m         \u001b[0mimplied\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindex\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 420\u001b[0;31m         \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"Shape of passed values is {passed}, indices imply {implied}\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    421\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    422\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: Shape of passed values is (0, 1), indices imply (0, 37)"]}]},{"cell_type":"code","source":["# Convert predictions to class indices\n","predicted_classes = np.argmax(all_preds, axis=1)\n","\n","# Convert true labels to class indices\n","true_classes = np.argmax(all_labels, axis=1)\n","\n","# Calculate accuracy\n","accuracy = accuracy_score(true_classes, predicted_classes)\n","print(f\"Accuracy on the test dataset: {accuracy * 100:.2f}%\")"],"metadata":{"id":"3guvhmyhckzk","executionInfo":{"status":"aborted","timestamp":1732989394988,"user_tz":-330,"elapsed":18,"user":{"displayName":"Srikanth","userId":"11288702543808839877"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from google.colab import files\n","\n","# Download the CSV file\n","files.download(\"submission.csv\")"],"metadata":{"id":"CsfFh1bacp0k","executionInfo":{"status":"aborted","timestamp":1732989394988,"user_tz":-330,"elapsed":18,"user":{"displayName":"Srikanth","userId":"11288702543808839877"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import pandas as pd\n","import numpy as np\n","\n","# Load reference and submission files\n","reference = pd.read_csv('central_pixel_benchmark.csv')\n","submission = pd.read_csv('submission.csv')\n","\n","# Check if files are loaded correctly\n","print(\"Reference file shape:\", reference.shape)\n","print(\"Submission file shape:\", submission.shape)\n","\n","# Check for matching GalaxyIDs\n","merged = reference.merge(submission, on=\"GalaxyID\", suffixes=(\"_true\", \"_pred\"))\n","print(\"Merged file shape:\", merged.shape)\n","\n","# If merged is empty, check for mismatches\n","if merged.empty:\n","    print(\"No matching GalaxyIDs found. Verify the IDs in both files.\")\n","else:\n","    # Calculate accuracy\n","    correct = 0\n","    total = len(merged)\n","\n","    for _, row in merged.iterrows():\n","        true_label = np.argmax(row.filter(like=\"_true\").values)\n","        pred_label = np.argmax(row.filter(like=\"_pred\").values)\n","        if true_label == pred_label:\n","            correct += 1\n","\n","    accuracy = (correct / total) * 100\n","    print(f\"Test Accuracy: {accuracy:.2f}%\")\n","\n"],"metadata":{"id":"RnMWuextW9Xm","executionInfo":{"status":"aborted","timestamp":1732989394989,"user_tz":-330,"elapsed":19,"user":{"displayName":"Srikanth","userId":"11288702543808839877"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(reference['GalaxyID'].dtype)\n","print(submission['GalaxyID'].dtype)\n"],"metadata":{"id":"q7JtLUNkJ-BQ","executionInfo":{"status":"aborted","timestamp":1732989394989,"user_tz":-330,"elapsed":19,"user":{"displayName":"Srikanth","userId":"11288702543808839877"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(\"Reference GalaxyIDs:\", reference['GalaxyID'].head())\n","print(\"Submission GalaxyIDs:\", submission['GalaxyID'].head())\n"],"metadata":{"id":"c3RHXyfSLPXK","executionInfo":{"status":"aborted","timestamp":1732989394989,"user_tz":-330,"elapsed":19,"user":{"displayName":"Srikanth","userId":"11288702543808839877"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(\"Reference GalaxyID range:\", reference['GalaxyID'].min(), \"-\", reference['GalaxyID'].max())\n","print(\"Submission GalaxyID range:\", submission['GalaxyID'].min(), \"-\", submission['GalaxyID'].max())\n"],"metadata":{"id":"fBUGXEa2LRyA","executionInfo":{"status":"aborted","timestamp":1732989394989,"user_tz":-330,"elapsed":19,"user":{"displayName":"Srikanth","userId":"11288702543808839877"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["common_ids = set(reference['GalaxyID']).intersection(set(submission['GalaxyID']))\n","print(\"Number of matching GalaxyIDs:\", len(common_ids))\n"],"metadata":{"id":"QTVr3gqqMC9r","executionInfo":{"status":"aborted","timestamp":1732989394989,"user_tz":-330,"elapsed":19,"user":{"displayName":"Srikanth","userId":"11288702543808839877"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["missing_in_submission = set(reference['GalaxyID']) - set(submission['GalaxyID'])\n","missing_in_reference = set(submission['GalaxyID']) - set(reference['GalaxyID'])\n","\n","print(\"Number of IDs missing in submission:\", len(missing_in_submission))\n","print(\"Number of IDs missing in reference:\", len(missing_in_reference))\n"],"metadata":{"id":"Al3cZkguMFbL","executionInfo":{"status":"aborted","timestamp":1732989394989,"user_tz":-330,"elapsed":19,"user":{"displayName":"Srikanth","userId":"11288702543808839877"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"28UCMaMvMHzU","executionInfo":{"status":"aborted","timestamp":1732989394989,"user_tz":-330,"elapsed":19,"user":{"displayName":"Srikanth","userId":"11288702543808839877"}}},"execution_count":null,"outputs":[]}],"metadata":{"colab":{"provenance":[],"gpuType":"T4"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"},"accelerator":"GPU"},"nbformat":4,"nbformat_minor":0}